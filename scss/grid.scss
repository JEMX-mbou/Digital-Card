// Sizes map. Used for breakpoints and classnames.
$sizes: (
  'xs': 320px,
  's': 576px,
  'm': 768px,
  'l': 992px,
  'xl': 1200px,
  'xxl': 1400px
);

// Simple function used to get sizes based on the name.
@function size($name) { @return map-get($sizes, $name); }

// Number of columns used.
$colnum: 12;

// Reset for User Agent Styling.
html, body {
  padding: 0;
  margin: 0;
  width: 100%;
  min-height: 100%;
}

// For this grid system to work properly box-sizing needs to be set to border-box
body * {
  box-sizing: border-box;
}

// Container extendable and regular class.
// Breakpoints from map are used.
%container,
.container {
  width: 100%;
  margin: 0 auto;
  @each $size, $screenwidth in $sizes {
    @media screen and (min-width: $screenwidth) {
      width: round(($screenwidth * .95) / 10) * 10;
    }
  }
}

// Standard container-fluid
// Extendable class and regular class
%container-fluid,
.container-fluid {
  width: 100%;
}
// Row styling
// Standpard flexbox styling.
.row,
[class^='col-'],
[class*=' col-'],
.col,
.flex {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-content: space-around;
  flex-wrap: wrap;
  &.dp-block { display: block; }
  // Flex-direction can be changed with the following classes.
  &.fd-rowr { flex-direction: row-reverse }
  &.fd-col { flex-direction: column }
  &.fd-colr { flex-direction: column-reverse; }

  &.nowrap { flex-wrap: nowrap; }

  &.jc-initial { justify-content: initial; }
  &.jc-inherit { justify-content: inherit; }
  &.jc-flex-start { justify-content: flex-start; }
  &.jc-flex-end { justify-content: flex-end; }
  &.jc-center { justify-content: center; }
  &.jc-space-between { justify-content: space-between; }
  &.jc-space-around { justify-content: space-around; }
  &.jc-space-evenly { justify-content: space-evenly; }

  &.ac-initial { align-content: initial; }
  &.ac-inherit { align-content: inherit; }
  &.ac-flex-start { align-content: flex-start; }
  &.ac-flex-end { align-content: flex-end; }
  &.ac-center { align-content: center; }
  &.ac-space-between { align-content: space-between; }
  &.ac-space-around { align-content: space-around; }
  &.ac-space-evenly { align-content: space-evenly; }
  &.ac-stretch { align-content: stretch; }

  &.ai-baseline { align-items: baseline; }
  &.ai-initial { align-items: initial; }
  &.ai-inherit { align-items: inherit; }
  &.ai-flex-start { align-items: flex-start; }
  &.ai-flex-end { align-items: flex-end; }
  &.ai-center { align-items: center; }
  &.ai-stretch { align-items: stretch; }
}

// Base column styling.
[class^='col-'],
[class*=' col-'],
.col {
  width: 100%;
  padding: .5rem;
}

// For-loop to generate the 12 column grid.
@for $i from $colnum through 1 {
  // Width will be calculated as follows: 100% / (12 / i) where i is the iterator in the for-loop.
  // Calc function is used, because it's more accurate.
  $width: calc(100% / #{($colnum / $i)});

  // Base column class is generated.
  %col-#{$i},
  .col-#{$i} {
    width: $width;
  }

  // For each loop with the sizes map.
  // size is name for the screensize
  // screenwidth is the width of the screen in pixels
  @each $size, $screenWidth in $sizes {

    // Column class with screensize name and column number.
    %col-#{$size}-#{$i},
    .col-#{$size}-#{$i} {
        @media screen and (min-width: $screenWidth) { width: $width; }
    }
  }

}
